/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

/**
 * Main window frame for SSTDodgeballStats.
 *
 * @author Nathan Ott and Fatih Ridha
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame.
     */
    public MainFrame() {
        initComponents();
        setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainMenu = new view.MainMenu();
        leaderboard = new view.Leaderboard();
        schedule = new view.Schedule();
        recordStats = new view.RecordStats();
        recordMatch = new view.RecordMatch();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new java.awt.CardLayout());

        mainMenu.setName("Main Menu"); // NOI18N
        mainMenu.leaderboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchPage("Leaderboard");
            }
        });
        mainMenu.scheduleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchPage("Schedule");
            }
        });
        mainMenu.recordStatsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchPage("Record Stats");
            }
        });
        mainMenu.syncButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                model.Controller.sync();
                leaderboard.fillTable();
                schedule.fillMatches();
                recordStats.fillMatches();            }
        });
        getContentPane().add(mainMenu, "Main Menu");

        leaderboard.setName("Leaderboard"); // NOI18N
        leaderboard.menuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchPage("Main Menu");
            }
        });
        leaderboard.syncButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                model.Controller.sync();
                leaderboard.fillTable();
                schedule.fillMatches();
                recordStats.fillMatches();
            }
        });
        getContentPane().add(leaderboard, "Leaderboard");

        schedule.setName("Schedule"); // NOI18N
        schedule.menuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchPage("Main Menu");
            }
        });
        schedule.syncButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                model.Controller.sync();
                leaderboard.fillTable();
                schedule.fillMatches();
                recordStats.fillMatches();            }
        });
        getContentPane().add(schedule, "Schedule");

        recordStats.setName("Record Stats"); // NOI18N
        recordStats.menuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchPage("Main Menu");
            }
        });
        recordStats.recordMatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Object[] matchInfo = recordStats.getMatchInfo();
                String[] players = recordStats.getPlayers();
                recordMatch.prepareMatch((String) matchInfo[0], (String) matchInfo[1],
                    (boolean) matchInfo[2], (String) matchInfo[3], players);
                switchPage("Record Match");
            }
        });
        recordStats.syncButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                model.Controller.sync();
                leaderboard.fillTable();
                schedule.fillMatches();
                recordStats.fillMatches();
            }
        });
        getContentPane().add(recordStats, "Record Stats");

        recordMatch.setName("Record Match"); // NOI18N
        recordMatch.menuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordMatchMenuButtonActionPerformed();
            }
        });
        getContentPane().add(recordMatch, "Record Match");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Switches to the specified page. Page must be specified from each panel
     * page's cardName property in MainFrame.
     *
     * @param page page to switch to; corresponds to panel page's cardName
     * property
     */
    private void switchPage(String page) {
        java.awt.CardLayout cl = (java.awt.CardLayout) (getContentPane().getLayout());
        cl.show(getContentPane(), page);
    }

    private void recordMatchMenuButtonActionPerformed() {
        getContentPane().remove(recordMatch);
        recordMatch = new RecordMatch();
        recordMatch.setName("Record Match");
        recordMatch.menuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordMatchMenuButtonActionPerformed();
            }
        });
        getContentPane().add(recordMatch, "Record Match");
        switchPage("Main Menu");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        model.Controller.initialize();

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private view.Leaderboard leaderboard;
    private view.MainMenu mainMenu;
    private view.RecordMatch recordMatch;
    private view.RecordStats recordStats;
    private view.Schedule schedule;
    // End of variables declaration//GEN-END:variables
}
