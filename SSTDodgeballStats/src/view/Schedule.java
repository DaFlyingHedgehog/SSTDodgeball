/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

/**
 * Schedule panel page.
 *
 * @author Nathan Ott and Fatih Ridha
 */
public class Schedule extends javax.swing.JPanel {

    private javax.swing.DefaultListModel listModel;
    private model.DodgeballTableModel tableModel1;
    private model.DodgeballTableModel tableModel2;

    /**
     * Creates new form Schedule.
     */
    public Schedule() {
        initComponents();
        fillMatches();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuButton = new javax.swing.JButton();
        syncButton = new javax.swing.JButton();
        scheduleLabel = new javax.swing.JLabel();
        matchScroll = new javax.swing.JScrollPane();
        matchList = new javax.swing.JList();
        team1Scroll = new javax.swing.JScrollPane();
        team1Table = new javax.swing.JTable();
        team2Scroll = new javax.swing.JScrollPane();
        team2Table = new javax.swing.JTable();
        matchLabel = new javax.swing.JLabel();
        team1Label = new javax.swing.JLabel();
        team2Label = new javax.swing.JLabel();

        menuButton.setText("Menu");

        syncButton.setText("Sync");

        scheduleLabel.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        scheduleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scheduleLabel.setText("Schedule");

        matchList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                matchListValueChanged(evt);
            }
        });
        matchScroll.setViewportView(matchList);

        team1Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        team1Scroll.setViewportView(team1Table);

        team2Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        team2Scroll.setViewportView(team2Table);

        matchLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        matchLabel.setText("Matches");

        team1Label.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        team1Label.setText("Team 1");

        team2Label.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        team2Label.setText("Team 2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(menuButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 658, Short.MAX_VALUE)
                        .addComponent(syncButton)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(scheduleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(matchScroll)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(matchLabel)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(team2Scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(team1Scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(team1Label, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(team2Label))
                        .addGap(18, 18, 18))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(menuButton)
                    .addComponent(syncButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scheduleLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(matchLabel)
                    .addComponent(team1Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(team1Scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(team2Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(team2Scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 2, Short.MAX_VALUE))
                    .addComponent(matchScroll))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Event for when a match from matchList is selected. Populates team tables
     * with info based on the selected match.
     *
     * @param evt
     */
    private void matchListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_matchListValueChanged
        fillTeams();
    }//GEN-LAST:event_matchListValueChanged

    /**
     * Populates matchList with match data from SQLite table "schedule".
     */
    public void fillMatches() {
        java.util.ArrayList<java.util.HashMap<String, Object>> data = model.Controller.getData(1);
        listModel = new javax.swing.DefaultListModel();
        for (java.util.HashMap<String, Object> match : data) {
            String s = match.get("team1") + " vs " + match.get("team2")
                    + " (" + match.get("date") + ")";
            listModel.addElement(s);
        }
        matchList.setModel(listModel);
        fillTeams();
    }

    /**
     * Populates team tables with player data from SQLite table "matches" based
     * on selected match from matchList.
     */
    private void fillTeams() {
        String[] columns = {"Player", "Throws", "Hits", "Catches", "Hit Out", "Caught Out", "Survivor"};
        tableModel1 = new model.DodgeballTableModel(columns);
        tableModel2 = new model.DodgeballTableModel(columns);
        team1Label.setText("Team 1");
        team2Label.setText("Team 2");
        double match = matchList.getSelectedIndex() + 1;
        if (match != 0) {
            String selected = matchList.getSelectedValue().toString();
            String team1 = selected.substring(0, selected.indexOf(" vs "));
            team1Label.setText(team1);
            String team2 = selected.substring(selected.indexOf(" vs ") + 4, selected.indexOf(" ("));
            team2Label.setText(team2);
            java.util.ArrayList<java.util.HashMap<String, Object>> dataSet = model.Controller.getData(2);
            for (java.util.HashMap<String, Object> data : dataSet) {
                if (data.get("match").equals(match)) {
                    java.util.HashMap<String, Object> clone = (java.util.HashMap) (data.clone());
                    clone.remove("match");
                    clone.remove("team");
                    if (data.get("team").equals(team1)) {
                        tableModel1.addRow(clone.values().toArray());
                    } else if (data.get("team").equals(team2)) {
                        tableModel2.addRow(clone.values().toArray());
                    }
                }
            }
        }
        team1Table.setModel(tableModel1);
        team2Table.setModel(tableModel2);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel matchLabel;
    private javax.swing.JList matchList;
    private javax.swing.JScrollPane matchScroll;
    public javax.swing.JButton menuButton;
    private javax.swing.JLabel scheduleLabel;
    public javax.swing.JButton syncButton;
    private javax.swing.JLabel team1Label;
    private javax.swing.JScrollPane team1Scroll;
    private javax.swing.JTable team1Table;
    private javax.swing.JLabel team2Label;
    private javax.swing.JScrollPane team2Scroll;
    private javax.swing.JTable team2Table;
    // End of variables declaration//GEN-END:variables
}
